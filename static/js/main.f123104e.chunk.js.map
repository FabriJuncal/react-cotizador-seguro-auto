{"version":3,"sources":["components/Header.jsx","helper.js","components/Formulario.jsx","components/Resumen.jsx","components/Resultado.jsx","components/Spinner.jsx","App.js","reportWebVitals.js","index.js"],"names":["ContenedorHeader","styled","header","TextoHeader","h1","Header","titulo","primerMayuscula","texto","charAt","toUpperCase","slice","Campo","div","Label","label","Select","select","InputRadio","input","Boton","button","Error","Formulario","guardarResumen","guardarCargando","useState","marca","year","plan","datos","guardarDatos","error","guardarError","obtenerInformacion","e","target","name","value","onSubmit","preventDefault","trim","resultado","diferencia","Date","getFullYear","obtenerDiferenciaYear","incremento","calcularMarca","incrementoPlan","obtenerPlan","parseFloat","toFixed","setTimeout","cotizacion","Number","onChange","type","checked","ContenedorResumen","Resumen","TransitionGroup","component","className","CSSTransition","classNames","timeout","Mensaje","p","ResultadoCotizacion","TextoCotizacion","Resultado","enter","exit","Spinner","Contenedor","ContenedorFormulario","App","resumen","cargando","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f123104e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// Importamos la libreria \"Styled Components\"\r\n// Se utiliza para mesclar Js con Css\r\n// Lo que se hace es declarar a una variable una funcíon con las deficiniones Css en un Template String\r\n// Y luego utilizar los nombres de las variables en forma de etiquetas HTML\r\n\r\nconst ContenedorHeader = styled.header`\r\n    background-color: #26C6DA;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    color: #FFFFFF;\r\n`;\r\n\r\nconst TextoHeader = styled.h1`\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    font-family: 'Slabo 27px', serif;\r\n    text-align: center;\r\n`;\r\n\r\nconst Header = ({titulo}) => ( \r\n    // Utilizamos los Styled Components Creados\r\n    // Para utilizarlos se agrega el nombre de las variables con la función de \"Emotion\" como si fueran etiquetas HTML\r\n    // Que el \"Styled Component\" contenga etiquetas de apertura y cierra va a depender a que etiqueta del DOM estamos haciendo referencia\r\n    // Si hacemos referencia a una etiqueta \"body\" tendra de apertura y cierre\r\n    // Si hacemos referencia a una etiqueta  \"input\" solo tendra apertura\r\n    <ContenedorHeader> \r\n        <TextoHeader>{titulo}</TextoHeader>\r\n    </ContenedorHeader> \r\n\r\n);\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","export  function obtenerDiferenciaYear(year){\r\n    return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca(marca){\r\n    let incremento;\r\n\r\n    switch (marca) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\n\r\nexport function obtenerPlan(plan){\r\n    return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\n\r\nexport function primerMayuscula(texto){\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","import { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport {obtenerDiferenciaYear, calcularMarca, obtenerPlan} from \"../helper\";\r\n\r\n// Importamos la libreria \"Styled Components\"\r\n// Se utiliza para mesclar Js con Css\r\n// Lo que se hace es declarar a una variable una funcíon con las deficiniones Css en un Template String\r\n// Y luego utilizar los nombres de las variables en forma de etiquetas HTML\r\n\r\nconst Campo = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n    align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    flex: 0 0 100px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    display: block;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    border: 1px solid #e1e1e1;\r\n    /*Esta propiedad quita el estilo nativo que le agrega el navegador al componente y de este modo podemos agregarle estilos personalizados*/\r\n    -webkit-appearance: none; \r\n`;\r\n\r\nconst InputRadio = styled.input`\r\n    margin: 0 1rem;\r\n`;\r\n\r\nconst Boton = styled.button`\r\n    background-color: #00838F;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    border: none;\r\n    transition: background-color .3s ease;\r\n    margin-top: 2rem;\r\n\r\n    /* De esta manera se definen los eventos CSS */\r\n    &:hover{\r\n        background-color: #26C6DA;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Error = styled.div`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem;\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n`;\r\n\r\nconst Formulario = ({guardarResumen, guardarCargando}) => {\r\n\r\n    // Estado que manejará los datos del Formulario\r\n    const [datos, guardarDatos] = useState({\r\n        marca: '',\r\n        year: '',\r\n        plan: ''\r\n    });\r\n\r\n    const [error, guardarError] = useState(false);\r\n\r\n    // Con destructuring se extrae los valores del State\r\n    const {marca, year, plan} = datos;\r\n\r\n    // Se lee los datos del formulario y se coloca en el State\r\n    const obtenerInformacion = e =>{\r\n        guardarDatos({\r\n            ...datos,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const cotizarSeguro = e =>{\r\n        e.preventDefault();\r\n\r\n\r\n        \r\n        if(marca.trim() === '' || year.trim() === '' || plan.trim() === ''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        guardarError(false);\r\n\r\n        // Base de la cotización: 2000\r\n        let resultado = 2000;\r\n        // Obtiene la diferencia de años\r\n        const diferencia = obtenerDiferenciaYear(year);\r\n        // Por cada año de diferencia le resta el  3%\r\n        resultado -= ((diferencia * 3) * resultado / 100);\r\n\r\n        // Por cada marca se le suma un %:\r\n        // Europeo 30%\r\n        // Americano 15%\r\n        // Asiatico 5%\r\n        resultado = resultado * calcularMarca(marca);\r\n\r\n        // Basico aumenta 20%\r\n        // Completo 50%\r\n        const incrementoPlan = obtenerPlan(plan);\r\n        resultado = parseFloat( incrementoPlan * resultado ).toFixed(2);\r\n        \r\n        // Mostramos el Spinner durante 3s y actualizamos el Resumen\r\n        guardarCargando(true);\r\n\r\n        setTimeout(() => {\r\n            guardarCargando(false);\r\n            guardarResumen({\r\n                cotizacion: Number(resultado),\r\n                datos\r\n            });\r\n        }, 3000);\r\n\r\n    };\r\n\r\n\r\n\r\n    return ( \r\n// Utilizamos los Styled Components Creados\r\n// Para utilizarlos se agrega el nombre de las variables con la función de \"Emotion\" como si fueran etiquetas HTML\r\n// Que el \"Styled Component\" contenga etiquetas de apertura y cierra va a depender a que etiqueta del DOM estamos haciendo referencia\r\n// Si hacemos referencia a una etiqueta \"body\" tendra de apertura y cierre\r\n// Si hacemos referencia a una etiqueta  \"input\" solo tendra apertura\r\n\r\n        <form\r\n            onSubmit={cotizarSeguro}\r\n        >\r\n            {error ? <Error>Todos los campos son obligatorios</Error> : null}\r\n            <Campo>\r\n                <Label>Marca</Label>\r\n                <Select\r\n                    name=\"marca\"\r\n                    value={marca}\r\n                    onChange={obtenerInformacion}\r\n                >\r\n                    <option value=\"\">-- Seleccione --</option>\r\n                    <option value=\"europeo\">Europeo</option>\r\n                    <option value=\"americano\">Americano</option>\r\n                    <option value=\"asiatico\">Asiatico</option>\r\n                </Select>\r\n            </Campo>\r\n\r\n            <Campo>\r\n                <Label>Año</Label>\r\n                <Select\r\n                    name=\"year\"\r\n                    value={year}\r\n                    onChange={obtenerInformacion}\r\n                >\r\n                    <option value=\"\">-- Seleccione --</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                    <option value=\"2018\">2018</option>\r\n                    <option value=\"2017\">2017</option>\r\n                    <option value=\"2016\">2016</option>\r\n                    <option value=\"2015\">2015</option>\r\n                    <option value=\"2014\">2014</option>\r\n                    <option value=\"2013\">2013</option>\r\n                    <option value=\"2012\">2012</option>\r\n                </Select>\r\n            </Campo>\r\n\r\n            <Campo>\r\n                <Label>Plan</Label>\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"basico\"\r\n                    checked={plan === \"basico\"}\r\n                    onChange={obtenerInformacion}\r\n                /> Básico\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"completo\"\r\n                    checked={plan === \"completo\"}\r\n                    onChange={obtenerInformacion}\r\n                /> Completo\r\n            </Campo>\r\n\r\n            <Boton type=\"submit\">Cotizar</Boton>\r\n\r\n        </form>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarResumen: PropTypes.func.isRequired,\r\n    guardarCargando: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\r\nimport {primerMayuscula} from '../helper';\r\n\r\n\r\nconst ContenedorResumen = styled.div`\r\n    padding: 1rem;\r\n    text-align: center;\r\n    background-color: #00838F;\r\n    color: #fff;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst Resumen = ({datos, cotizacion}) => {\r\n\r\n    const {marca, year, plan} = datos;\r\n\r\n    if(marca === '' || year === '' || plan === '') return null;\r\n\r\n    return ( \r\n        <TransitionGroup \r\n            component=\"div\"       // Definimos el componente HTML que creará para la Transición\r\n            className=\"resumen\"\r\n        >\r\n            <CSSTransition\r\n                classNames=\"resumen\" // Se le agrega como clase el prefijo \"resultado\"\r\n                key={cotizacion}     // Se tiene que enviar una clave unica, en este caso será la \"cotizacion\"\r\n                timeout={500}        // Se define el tiempo que durara la animación\r\n            > \r\n                <ContenedorResumen>\r\n                    <h2>Resumen de Cotización</h2>   \r\n                    <ul>\r\n                        <li>Marca: {primerMayuscula(marca)}</li>\r\n                        <li>Plan:  {primerMayuscula(plan)}</li>\r\n                        <li>Año del Auto: {primerMayuscula(year)}</li>\r\n                    </ul>\r\n                </ContenedorResumen>\r\n            </CSSTransition>\r\n        </TransitionGroup>\r\n    );\r\n}\r\n\r\nResumen.propTypes = {\r\n    datos: PropTypes.object.isRequired,\r\n    cotizacion: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Resumen;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n/* IMPORTANTE: Ver en \"src/index.css\"  el formato de prefijos que se utiliza para dar estilos a la transición que ejecuta la libreria*/\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\r\n\r\nconst Mensaje = styled.p`\r\n    background-color: rgb(127,224,237);\r\n    margin-top: 2rem;\r\n    padding: 1rem;\r\n    text-align: center;\r\n`;\r\n\r\nconst ResultadoCotizacion = styled.div`\r\n    text-align: center;\r\n    padding: .5rem;\r\n    border: 1px solid #26C6DA;\r\n    background-color: rgb(127,224,237);\r\n    margin-top: 1rem;\r\n    position: relative;\r\n`;\r\n\r\nconst TextoCotizacion = styled.p`\r\n    color: #00838F;\r\n    padding: 1rem;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    margin: 0;\r\n`;\r\n\r\nconst Resultado = ({cotizacion}) => {\r\n    return ( \r\n        (cotizacion === 0) \r\n            ? <Mensaje>Elige marca, año  y tipo de seguro</Mensaje> \r\n            : ( \r\n                <ResultadoCotizacion>\r\n                    <TransitionGroup\r\n                        component=\"div\"        // Definimos el componente HTML que creará para la Transición\r\n                        className=\"resultado\"  // Se le agrega como clase el prefijo \"resultado\"\r\n                    >\r\n                        <CSSTransition\r\n                            classNames=\"resultado\"             // Se le agrega como clase el prefijo \"resultado\"\r\n                            key={cotizacion}                   // Se tiene que enviar una clave unica, en este caso será la \"cotizacion\"\r\n                            timeout={{enter: 500, exit: 500}}  // Se define el tiempo que durara la animación\r\n                        >\r\n                                <TextoCotizacion>El total es: <span>${cotizacion}</span></TextoCotizacion>\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                </ResultadoCotizacion>\r\n               )        \r\n    );\r\n}\r\n\r\nResultado.propTypes = {\r\n    cotizacion: PropTypes.number.isRequired\r\n}\r\n \r\nexport default Resultado;","import React from 'react';\r\nimport './Spinner/Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"sk-circle\">\r\n            <div className=\"sk-circle1 sk-child\"></div>\r\n            <div className=\"sk-circle2 sk-child\"></div>\r\n            <div className=\"sk-circle3 sk-child\"></div>\r\n            <div className=\"sk-circle4 sk-child\"></div>\r\n            <div className=\"sk-circle5 sk-child\"></div>\r\n            <div className=\"sk-circle6 sk-child\"></div>\r\n            <div className=\"sk-circle7 sk-child\"></div>\r\n            <div className=\"sk-circle8 sk-child\"></div>\r\n            <div className=\"sk-circle9 sk-child\"></div>\r\n            <div className=\"sk-circle10 sk-child\"></div>\r\n            <div className=\"sk-circle11 sk-child\"></div>\r\n            <div className=\"sk-circle12 sk-child\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Header from \"./components/Header\";\r\nimport Formulario from \"./components/Formulario\";\r\nimport Resumen from \"./components/Resumen\";\r\nimport Resultado from \"./components/Resultado\";\r\nimport Spinner from \"./components/Spinner\";\r\n\r\n// Importamos la libreria \"Styled Components\"\r\n// Se utiliza para mesclar Js con Css\r\n// Lo que se hace es declarar a una variable una funcíon con las deficiniones Css en un Template String\r\n// Y luego utilizar los nombres de las variables en forma de etiquetas HTML\r\n\r\nconst Contenedor = styled.div`\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ContenedorFormulario = styled.div`\r\n  background-color: #FFF;\r\n  padding: 3rem;\r\n`;\r\n\r\nfunction App() {\r\n\r\n  const [resumen, guardarResumen] = useState({\r\n    cotizacion: 0,\r\n    datos: {\r\n      marca:'',\r\n      year: '',\r\n      plan: ''\r\n    }\r\n  });\r\n\r\n  const [cargando, guardarCargando] = useState(false);\r\n\r\n  const {cotizacion, datos} = resumen;\r\n\r\n  return (\r\n    // Utilizamos los Styled Components Creados\r\n    // Para utilizarlos se agrega el nombre de las variables con la función de \"Emotion\" como si fueran etiquetas HTML\r\n    // Que el \"Styled Component\" contenga etiquetas de apertura y cierra va a depender a que etiqueta del DOM estamos haciendo referencia\r\n    // Si hacemos referencia a una etiqueta \"body\" tendra de apertura y cierre\r\n    // Si hacemos referencia a una etiqueta  \"input\" solo tendra apertura\r\n    <Contenedor>\r\n        <Header titulo='Cotizador de Seguros'/>\r\n        <ContenedorFormulario>\r\n          <Formulario\r\n            guardarResumen={guardarResumen}\r\n            guardarCargando={guardarCargando}\r\n          />\r\n\r\n          {/* Detectamos si se esta cargando los datos del resumen y mostramos el Spinner */}\r\n          {cargando ? <Spinner/> : null}\r\n\r\n          {/* Detectamos si no se esta cargando y mostramos el Resumen y el Resultado */}\r\n          { !cargando\r\n            ? <Resumen \r\n                datos={datos}\r\n                cotizacion={cotizacion}\r\n              /> : null\r\n          }\r\n\r\n          { !cargando\r\n            ? \r\n\r\n              <Resultado \r\n                cotizacion={cotizacion}\r\n              /> : null\r\n          }\r\n\r\n        </ContenedorFormulario>\r\n    </Contenedor>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}